{"version":3,"sources":["logo-small.png","apollo/ApolloClient.js","apollo/Query.js","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","client","ApolloClient","link","ApolloLink","from","onError","graphQLErrors","networkError","forEach","message","locations","path","console","log","HttpLink","uri","credentials","cache","InMemoryCache","LAUNCHES_QUERY","gql","LAUNCH_QUERY","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","Fragment","className","classnames","format","to","MissionKey","Launches","useQuery","loading","error","data","launches","map","key","Launch","match","variables","params","launch_year","rocket","rocket_id","rocket_name","rocket_type","classNames","App","src","logo","alt","style","width","display","margin","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e553a25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-small.2f3615cd.png\";","// https://www.apollographql.com/docs/react/advanced/boost-migration/\r\n\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { onError } from 'apollo-link-error';\r\nimport { ApolloLink } from 'apollo-link';\r\n\r\nexport const client = new ApolloClient({\r\n  link: ApolloLink.from([\r\n    onError(({ graphQLErrors, networkError }) => {\r\n      if (graphQLErrors)\r\n        graphQLErrors.forEach(({ message, locations, path }) =>\r\n          console.log(\r\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\r\n          ),\r\n        );\r\n      if (networkError) console.log(`[Network error]: ${networkError}`);\r\n    }),\r\n    new HttpLink({\r\n      uri: '/graphql',\r\n      credentials: 'same-origin',\r\n    }),\r\n  ]),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default client;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: String!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default { LAUNCHES_QUERY, LAUNCH_QUERY };\r\n","import React from 'react';\r\nimport classnames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction LaunchItem({\r\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\r\n}) {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"card card-body bg-dark mb-3\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-9\">\r\n            <h4>\r\n              <span className=\"text-muted\">Mission: </span>\r\n              <span\r\n                className={classnames({\r\n                  'text-success': launch_success,\r\n                  'text-danger': !launch_success,\r\n                })}\r\n              >\r\n                {' '}\r\n                {mission_name}\r\n              </span>\r\n            </h4>\r\n            <p className=\"text-primary\">\r\n              Date:{' '}\r\n              <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\r\n              Launch Details\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default LaunchItem;\r\n","import React from 'react';\r\n\r\nfunction MissionKey() {\r\n  return (\r\n    <div className=\"my-3 text-warning\">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MissionKey;\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { LAUNCHES_QUERY } from '../apollo/Query';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nfunction Launches() {\r\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n  if (loading) return <h4>Loading...</h4>;\r\n  if (error) console.log(error);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h1 className=\"display-4 my-3\">Launches</h1>\r\n      <MissionKey />\r\n      <div>\r\n        {data.launches.map(launch => (\r\n          <LaunchItem key={launch.flight_number} launch={launch} />\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Launches;\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { LAUNCH_QUERY } from '../apollo/Query';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nfunction Launch({ match }) {\r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n    variables: { flight_number: match.params.flight_number },\r\n  });\r\n\r\n  if (loading) return <h4>loading...</h4>;\r\n  if (error) console.log(error);\r\n\r\n  const {\r\n    flight_number,\r\n    mission_name,\r\n    launch_year,\r\n    launch_success,\r\n    rocket: { rocket_id, rocket_name, rocket_type },\r\n  } = data.launch;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <h1 className=\"display-4 my-3\">\r\n          <span className=\"text-muted\">Mission:</span> {mission_name}\r\n        </h1>\r\n        <h4 className=\"mb-3\">Launch Details</h4>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n          <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n          <li className=\"list-group-item\">\r\n            Launch Successful:{' '}\r\n            <span\r\n              className={classNames({\r\n                'text-success': launch_success,\r\n                'text-danger': !launch_success,\r\n              })}\r\n            >\r\n              {launch_success ? 'Yes' : 'No'}\r\n            </span>\r\n          </li>\r\n        </ul>\r\n\r\n        <h4 className=\"my-3\">Rocket Details</h4>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n          <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n          <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n        </ul>\r\n        <hr />\r\n        <Link to=\"/\" className=\"btn btn-secondary\">\r\n          Back\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Launch;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport ApolloClient from './apollo/ApolloClient';\n\nimport './App.css';\nimport logo from './logo-small.png';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nfunction App() {\n  return (\n    <ApolloProvider client={ApolloClient}>\n      <Router>\n        <div className=\"conntainer\">\n          <img\n            src={logo}\n            alt=\"SpaceX\"\n            style={{ width: 300, display: 'block', margin: 'auto' }}\n          />\n          <Route exact={true} path=\"/\" component={Launches} />\n          <Route\n            exact={true}\n            path=\"/launch/:flight_number\"\n            component={Launch}\n          />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}